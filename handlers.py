from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import os
import logging
import time

# from config import ADMIN_ID # –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç config
from .states import DateConstructorStates
from .keyboards import ( # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    get_atmosphere_keyboard,
    get_activity_keyboard,
    get_final_touch_keyboard,
    get_start_keyboard,
    get_date_keyboard,
    get_final_keyboard,
)

router = Router()

# –ü–æ–ª—É—á–∞–µ–º ADMIN_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
admin_id_str = os.getenv("ADMIN_ID")
if not admin_id_str:
    raise ValueError("ADMIN_ID environment variable not set or empty")
ADMIN_ID = int(admin_id_str) # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int, —Ç–∞–∫ –∫–∞–∫ ID —á–∏—Å–ª–æ

# –°–ª–æ–≤–∞—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
ATMOSPHERE_TEXTS = {
    "–í–µ–π–∫–±–æ—Ä–¥ –∏ –ø–µ—Ç–Ω–∞—Ç –Ω–∞ –ø—Ä–∏—á–∞–ª–µ": "–Ω–∞ –≤–µ–π–∫–±–æ—Ä–¥ —Å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º –ø–µ—Ç–Ω–∞—Ç–æ–º –Ω–∞ –ø—Ä–∏—á–∞–ª–µ",
    "–°–∞–ø—ã –∏–ª–∏ –±–∞–π–¥–∞—Ä–∫–∏ –ø–æ —Ä–µ–∫–µ": "–Ω–∞ –≤–æ–¥–Ω—É—é –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ —Å–∞–ø–∞—Ö –∏–ª–∏ –±–∞–π–¥–∞—Ä–∫–∞—Ö",
    "–û—Ç–∫—Ä—ã—Ç—ã–π –±–∞—Å—Å–µ–π–Ω –∏ –º–æ—Å–∫–æ–≤—Å–∫–∏–π –∑–∞–≥–∞—Ä": "–≤ –±–∞—Å—Å–µ–π–Ω, –∑–∞ —Å–æ–ª–Ω—Ü–µ–º –∏ –Ω–æ–≤—ã–º –º–æ—Å–∫–æ–≤—Å–∫–∏–º –∑–∞–≥–∞—Ä–æ–º",
}
ACTIVITY_TEXTS = {
    "–ù–æ–≤—ã–π –ò–µ—Ä—É—Å–∞–ª–∏–º. –°–≤–µ—Ç –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏": "–ø–æ–µ–∑–¥–∫–∞ –≤ –ù–æ–≤—ã–π –ò–µ—Ä—É—Å–∞–ª–∏–º –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫—É ¬´–°–≤–µ—Ç –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏¬ª",
    "Postrigay Gallery + AZ/ART + –†–æ—Å–ò–ó–û": "–ø—Ä–æ–≥—É–ª–∫–∞ –∏–º–µ–Ω–∏ —Ç—Ä–µ—Ö –≤—ã—Å—Ç–∞–≤–æ–∫: Postrigay Gallery + AZ/ART + –†–æ—Å–ò–ó–û",
    "–ù–æ–≤–∞—è –¢—Ä–µ—Ç—å—è–∫–æ–≤–∫–∞. –ë–æ—Ä–∏—Å –ö—É—Å—Ç–æ–¥–∏–µ–≤.": "—Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞. –ù–æ–≤–∞—è –¢—Ä–µ—Ç—å—è–∫–æ–≤–∫–∞. –ë–æ—Ä–∏—Å –ö—É—Å—Ç–æ–¥–∏–µ–≤",
}
FINAL_TOUCH_TEXTS = {
    "–ó–∞ –ö—Ä—ã—à–µ–π": "–ó–∞ –ö—Ä—ã—à–µ–π",
    "Bruno": "Bruno",
    "Big Wine Freaks": "Big Wine Freaks",
    "—Ç–∞–±–∏": "—Ç–∞–±–∏",
}
MONTHS = {
    "01": "—è–Ω–≤–∞—Ä—è", "02": "—Ñ–µ–≤—Ä–∞–ª—è", "03": "–º–∞—Ä—Ç–∞", "04": "–∞–ø—Ä–µ–ª—è", "05": "–º–∞—è", "06": "–∏—é–Ω—è",
    "07": "–∏—é–ª—è", "08": "–∞–≤–≥—É—Å—Ç–∞", "09": "—Å–µ–Ω—Ç—è–±—Ä—è", "10": "–æ–∫—Ç—è–±—Ä—è", "11": "–Ω–æ—è–±—Ä—è", "12": "–¥–µ–∫–∞–±—Ä—è"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    start_time = time.time()
    logger.info(f"Processing /start command from user {message.from_user.id}")
    try:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–≤–∏–¥–∞–Ω–∏–π <b>Date Day 2025</b> üöß\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∞ —è —Ä–∞—Å—Å–∫–∞–∂—É –ê–Ω—Ç–æ–Ω—É.",
            reply_markup=get_start_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()
        logger.info(f"/start command processed in {time.time() - start_time:.2f} seconds")
    except Exception as e:
        logger.error(f"Error in /start command: {e}")
        raise

@router.message(F.text == "–û–≥–æ! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º! üëÄ")
async def start_steps(message: Message, state: FSMContext):
    start_time = time.time()
    logger.info(f"Processing '–û–≥–æ! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º! üëÄ' from user {message.from_user.id}")
    try:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º.", reply_markup=ReplyKeyboardRemove())
        await message.answer(
            "<b>–ß–∞—Å—Ç—å 1. –£—Ç—Ä–æ.</b>\n\n"
            "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –ª–∏–±–æ —Ä–∞–Ω–æ, –ª–∏–±–æ –ø–æ–∑–¥–Ω–æ, –Ω–æ —Ö–æ—á–µ—Ç—Å—è –∫–∞–∫–æ–π-—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞–≤—Ç—Ä–∞–∫ –≤ –º–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –≤–∫–ª—é—á–µ–Ω):",
            reply_markup=get_atmosphere_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(DateConstructorStates.atmosphere)
        logger.info(f"'–û–≥–æ! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º! üëÄ' processed in {time.time() - start_time:.2f} seconds")
    except Exception as e:
        logger.error(f"Error in '–û–≥–æ! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º! üëÄ': {e}")
        raise

@router.message(StateFilter(DateConstructorStates.atmosphere))
async def process_atmosphere_selection(message: Message, state: FSMContext):
    if message.text == "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Üí":
        await message.answer(
            "–ù–∞–ø–∏—à–∏, –∫—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –ø–æ–π—Ç–∏ —É—Ç—Ä–æ–º:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(DateConstructorStates.custom_atmosphere)
        return

    await state.update_data(atmosphere=message.text)
    await message.answer(
        "<b>–®–∞–≥ 2. –î–µ–Ω—å.</b>\n\n"
        "–ù—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Ç–∞—Ç—å—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞–ª—ã –Ω–∞ –±–æ–∫–∞–ª—å—á–∏–∫:",
        reply_markup=get_activity_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(DateConstructorStates.activity)

@router.message(StateFilter(DateConstructorStates.activity))
async def process_activity_selection(message: Message, state: FSMContext):
    if message.text == "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Üí":
        await message.answer(
            "–ù–∞–ø–∏—à–∏, –∫—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –ø–æ–π—Ç–∏ –¥–Ω–µ–º:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(DateConstructorStates.custom_activity)
        return

    await state.update_data(activity=message.text)
    await message.answer(
        "<b>–®–∞–≥ 3. –í–µ—á–µ—Ä.</b>\n\n"
        "–ù–∞–≥—É–ª—è–ª–∏—Å—å, –ø–æ—Ä–∞ –∏ —Å–µ—Ä—å–µ–∑–Ω–æ –ø–æ–µ—Å—Ç—å:",
        reply_markup=get_final_touch_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(DateConstructorStates.final_touch)

@router.message(StateFilter(DateConstructorStates.final_touch))
async def process_final_touch(message: Message, state: FSMContext):
    if message.text == "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Üí":
        await message.answer(
            "–ù–∞–ø–∏—à–∏, –∫—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –ø–æ–π—Ç–∏ –≤–µ—á–µ—Ä–æ–º:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(DateConstructorStates.custom_final_touch)
        return

    await state.update_data(final_touch=message.text)
    await message.answer(
        "<b>–®–∞–≥ 4. –í—ã–±–æ—Ä –¥–∞—Ç—ã.</b>\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=get_date_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(DateConstructorStates.date)

@router.message(StateFilter(DateConstructorStates.date))
async def process_date(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        datetime.strptime(message.text, "%d.%m.%Y")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        await state.update_data(date=message.text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await message.answer(
            "üí≠ –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –æ—Ç —Å–µ–±—è? –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(DateConstructorStates.comment)
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
    except Exception as e:
        logger.error(f"Error in process_date: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()

@router.message(StateFilter(DateConstructorStates.comment))
async def process_comment(message: Message, state: FSMContext, bot):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        date = data.get('date', '')
        atmo_text = ATMOSPHERE_TEXTS.get(data.get('atmosphere'), data.get('atmosphere'))
        act_text = ACTIVITY_TEXTS.get(data.get('activity'), data.get('activity'))
        final_touch = FINAL_TOUCH_TEXTS.get(data.get('final_touch'), data.get('final_touch'))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç '21 –∏—é–Ω—è'
        try:
            date_obj = datetime.strptime(date, "%d.%m.%Y")
            day = date_obj.day
            month = MONTHS[date_obj.strftime("%m")]
            date_text = f"{day} {month}"
        except Exception:
            date_text = date

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
        additional_atmo_text = ""
        if data.get('atmosphere') == "–í–µ–π–∫–±–æ—Ä–¥ –∏ –ø–µ—Ç–Ω–∞—Ç –Ω–∞ –ø—Ä–∏—á–∞–ª–µ":
            additional_atmo_text = " –ù–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –∏–≥—Ä–∏—Å—Ç–æ–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–∞—Ç–µ—Ä–∞."
        elif data.get('atmosphere') == "–°–∞–ø—ã –∏–ª–∏ –±–∞–π–¥–∞—Ä–∫–∏ –ø–æ —Ä–µ–∫–µ":
            additional_atmo_text = " –ü–µ—Ç–Ω–∞—Ç –±—É–¥–µ—Ç –∏ –∑–¥–µ—Å—å, –Ω–æ –∏–∑ —Ä—é–∫–∑–∞–∫–∞ –∏ –ø—Ä—è–º–æ –Ω–∞ –≤–æ–¥–µ."
        elif data.get('atmosphere') == "–û—Ç–∫—Ä—ã—Ç—ã–π –±–∞—Å—Å–µ–π–Ω –∏ –º–æ—Å–∫–æ–≤—Å–∫–∏–π –∑–∞–≥–∞—Ä":
            additional_atmo_text = " –ó–¥–µ—Å—å –∏–≥—Ä–∏—Å—Ç–æ–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ, –ø–æ—ç—Ç–æ–º—É –æ–Ω–æ –Ω–∞—Å –∂–¥–µ—Ç —á—É—Ç—å –ø–æ–∑–∂–µ."

        additional_final_text = ""
        if data.get('final_touch') == "–ó–∞ –ö—Ä—ã—à–µ–π":
            additional_final_text = " –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏–∫–∞ –∏ –∫—Ä–µ–≤–µ—Ç–∫–∏ —Å –º–∞–ª–∏–Ω–æ–π."
        elif data.get('final_touch') == "Bruno":
            additional_final_text = " –í–∏–∂—É, —á—Ç–æ —Ö–æ—á–µ—Ç—Å—è –º—è—Å–∞."
        elif data.get('final_touch') == "Big Wine Freaks":
            additional_final_text = " –ò–¥–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω—ç—Ç—Ç–∏."
        elif data.get('final_touch') == "—Ç–∞–±–∏":
            additional_final_text = " –î–∞–≤–Ω–æ –Ω–µ –±—ã–ª–∏, –ø–æ—Ä–∞ –≤—ã–ø–∏—Ç—å —Å–∞–∫–µ!"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        final_message = (
            "–£—Ä–∞! ‚ú®\n\n"
            f"–ú—ã –ø—Ä–æ—Å—ã–ø–∞–µ–º—Å—è <b>{date_text}</b> –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è <b>{atmo_text}</b>.{additional_atmo_text}\n"
            f"–ù–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–µ–º, –Ω–æ —Å–º–æ–∂–µ–º –≤–¥–æ—Ö–Ω—É—Ç—å –≤ —Å–µ–±—è —Å–∏–ª—ã –∏—Å–∫—É—Å—Å—Ç–≤–æ–º ‚Äî –Ω–∞—Å –∂–¥–µ—Ç <b>{act_text}</b>.\n"
            f"–§–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–æ–π –¥–Ω—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è <b>{final_touch}</b>.{additional_final_text} –ê –¥–∞–ª—å—à–µ —Å–º–æ—Ç—Ä–∏–º –∫—É–¥–∞ –Ω–∞—Å –∑–∞–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –≤–µ—á–µ—Ä. –î–æ –≤—Å—Ç—Ä–µ—á–∏!\n\n"
            "üíï üëÄ\n\n"
            "<i>PS. –ù–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –¥–Ω—è –º—ã –ø–æ–¥–ø–∏—Ç—ã–≤–∞–µ–º—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ–º, –Ω–æ –∏ —Å–æ–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏—è—Ç–Ω—ã–µ –ø—Ä–∏–≤–∞–ª—ã —Å –ø–∏–≤–æ–º –∏–ª–∏ –≤–∏–Ω–æ–º. –ë–µ–∑ —ç—Ç–æ–≥–æ –Ω–∏–∫–∞–∫!</i>"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(final_message, parse_mode="HTML")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—É
        admin_text = (
            f"üìÖ –ù–æ–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ!\n"
            f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.full_name} (@{message.from_user.username})\n\n"
            f"<b>–î–∞—Ç–∞:</b> {date_text}\n"
            f"<b>–£—Ç—Ä–æ:</b> {atmo_text}\n"
            f"<b>–î–µ–Ω—å:</b> {act_text}\n"
            f"<b>–í–µ—á–µ—Ä:</b> {final_touch}\n"
            f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {message.text}"
        )
        await bot.send_message(ADMIN_ID, admin_text, parse_mode="HTML")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
        await message.answer(
            "üí´ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ë—É–¥–µ—Ç –∫–ª–∞—Å—Å–Ω–æ!",
            reply_markup=get_final_keyboard()
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in process_comment: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()

@router.message(StateFilter(DateConstructorStates.custom_atmosphere))
async def process_custom_atmosphere_text(message: Message, state: FSMContext):
    await state.update_data(atmosphere=message.text)
    await message.answer(
        "<b>–®–∞–≥ 2. –î–µ–Ω—å.</b>\n\n"
        "–ù—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Ç–∞—Ç—å—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞–ª—ã –Ω–∞ –±–æ–∫–∞–ª—å—á–∏–∫:",
        reply_markup=get_activity_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(DateConstructorStates.activity)

@router.message(StateFilter(DateConstructorStates.custom_activity))
async def process_custom_activity_text(message: Message, state: FSMContext):
    await state.update_data(activity=message.text)
    await message.answer(
        "<b>–®–∞–≥ 3. –í–µ—á–µ—Ä.</b>\n\n"
        "–ù–∞–≥—É–ª—è–ª–∏—Å—å, –ø–æ—Ä–∞ –∏ —Å–µ—Ä—å–µ–∑–Ω–æ –ø–æ–µ—Å—Ç—å:",
        reply_markup=get_final_touch_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(DateConstructorStates.final_touch)

@router.message(StateFilter(DateConstructorStates.custom_final_touch))
async def process_custom_final_touch_text(message: Message, state: FSMContext):
    await state.update_data(final_touch=message.text)
    await message.answer(
        "<b>–®–∞–≥ 4. –í—ã–±–æ—Ä –¥–∞—Ç—ã.</b>\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=get_date_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(DateConstructorStates.date)

@router.message(F.text == "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ —Å–≤–∏–¥–∞–Ω–∏–µ?")
async def start_new_planning(message: Message, state: FSMContext):
    await message.answer(
        "<b>–ß–∞—Å—Ç—å 1. –£—Ç—Ä–æ.</b>\n\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –ª–∏–±–æ —Ä–∞–Ω–æ, –ª–∏–±–æ –ø–æ–∑–¥–Ω–æ, –Ω–æ —Ö–æ—á–µ—Ç—Å—è –∫–∞–∫–æ–π-—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞–≤—Ç—Ä–∞–∫ –≤ –º–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –≤–∫–ª—é—á–µ–Ω):",
        reply_markup=get_atmosphere_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(DateConstructorStates.atmosphere)
