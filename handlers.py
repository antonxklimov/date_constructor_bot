from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from datetime import datetime
import os
import logging
import time

# from config import ADMIN_ID # –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç config
from .states import DateConstructorStates # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from .keyboards import ( # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    get_atmosphere_keyboard,
    get_activity_keyboard,
    get_final_touch_keyboard,
    get_start_keyboard,
    get_date_keyboard,
)

router = Router()

# –ü–æ–ª—É—á–∞–µ–º ADMIN_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
admin_id_str = os.getenv("ADMIN_ID")
if not admin_id_str:
    raise ValueError("ADMIN_ID environment variable not set or empty")
ADMIN_ID = int(admin_id_str) # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int, —Ç–∞–∫ –∫–∞–∫ ID —á–∏—Å–ª–æ

# –°–ª–æ–≤–∞—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
ATMOSPHERE_TEXTS = {
    "atmo_1": "–Ω–∞ –≤–µ–π–∫–±–æ—Ä–¥ —Å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º –ø–µ—Ç–Ω–∞—Ç–æ–º –Ω–∞ –ø—Ä–∏—á–∞–ª–µ",
    "atmo_2": "–Ω–∞ –≤–æ–¥–Ω—É—é –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ —Å–∞–ø–∞—Ö –∏–ª–∏ –±–∞–π–¥–∞—Ä–∫–∞—Ö",
    "atmo_3": "–≤ –±–∞—Å—Å–µ–π–Ω, –∑–∞ —Å–æ–ª–Ω—Ü–µ–º –∏ –Ω–æ–≤—ã–º –º–æ—Å–∫–æ–≤—Å–∫–∏–º –∑–∞–≥–∞—Ä–æ–º",
}
ACTIVITY_TEXTS = {
    "act_1": "–ø–æ–µ–∑–¥–∫–∞ –≤ –ù–æ–≤—ã–π –ò–µ—Ä—É—Å–∞–ª–∏–º –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫—É ¬´–°–≤–µ—Ç –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏¬ª",
    "act_2": "–ø—Ä–æ–≥—É–ª–∫–∞ –∏–º–µ–Ω–∏ —Ç—Ä–µ—Ö –≤—ã—Å—Ç–∞–≤–æ–∫: Postrigay Gallery + AZ/ART + –†–æ—Å–ò–ó–û",
    "act_3": "—Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞. –ù–æ–≤–∞—è –¢—Ä–µ—Ç—å—è–∫–æ–≤–∫–∞. –ë–æ—Ä–∏—Å –ö—É—Å—Ç–æ–¥–∏–µ–≤",
}
FINAL_TOUCH_TEXTS = {
    "final_1": "–ó–∞ –ö—Ä—ã—à–µ–π",
    "final_2": "Bruno",
    "final_3": "Big Wine Freaks",
    "final_4": "–¢–∞–±–∏",
}
MONTHS = {
    "01": "—è–Ω–≤–∞—Ä—è", "02": "—Ñ–µ–≤—Ä–∞–ª—è", "03": "–º–∞—Ä—Ç–∞", "04": "–∞–ø—Ä–µ–ª—è", "05": "–º–∞—è", "06": "–∏—é–Ω—è",
    "07": "–∏—é–ª—è", "08": "–∞–≤–≥—É—Å—Ç–∞", "09": "—Å–µ–Ω—Ç—è–±—Ä—è", "10": "–æ–∫—Ç—è–±—Ä—è", "11": "–Ω–æ—è–±—Ä—è", "12": "–¥–µ–∫–∞–±—Ä—è"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    start_time = time.time()
    logger.info(f"Processing /start command from user {message.from_user.id}")
    try:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–≤–∏–¥–∞–Ω–∏–π <b>Date Day 2025</b> üöß\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∞ —è —Ä–∞—Å—Å–∫–∞–∂—É –ê–Ω—Ç–æ–Ω—É.",
            reply_markup=get_start_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()
        logger.info(f"/start command processed in {time.time() - start_time:.2f} seconds")
    except Exception as e:
        logger.error(f"Error in /start command: {e}")
        raise

@router.message(F.text == "–û–≥–æ! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º! üëÄ")
async def start_steps(message: Message, state: FSMContext):
    start_time = time.time()
    logger.info(f"Processing '–û–≥–æ! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º! üëÄ' from user {message.from_user.id}")
    try:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º.", reply_markup=ReplyKeyboardRemove())
        await message.answer(
            "<b>–ß–∞—Å—Ç—å 1. –£—Ç—Ä–æ.</b>\n\n"
            "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –ª–∏–±–æ —Ä–∞–Ω–æ, –ª–∏–±–æ –ø–æ–∑–¥–Ω–æ, –Ω–æ —Ö–æ—á–µ—Ç—Å—è –∫–∞–∫–æ–π-—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞–≤—Ç—Ä–∞–∫ –≤ –º–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –≤–∫–ª—é—á–µ–Ω):",
            reply_markup=get_atmosphere_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(DateConstructorStates.atmosphere)
        logger.info(f"'–û–≥–æ! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º! üëÄ' processed in {time.time() - start_time:.2f} seconds")
    except Exception as e:
        logger.error(f"Error in '–û–≥–æ! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º! üëÄ': {e}")
        raise

@router.callback_query(F.data.startswith("atmo_"))
async def process_atmosphere_selection(callback: CallbackQuery, state: FSMContext):
    await state.update_data(atmosphere=callback.data)
    await callback.message.edit_text(
        "<b>–®–∞–≥ 2. –î–µ–Ω—å.</b>\n\n"
        "–ù—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Ç–∞—Ç—å—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞–ª—ã –Ω–∞ –±–æ–∫–∞–ª—å—á–∏–∫:",
        reply_markup=get_activity_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(DateConstructorStates.activity)
    await callback.answer()

@router.callback_query(F.data.startswith("act_"))
async def process_activity_selection(callback: CallbackQuery, state: FSMContext):
    await state.update_data(activity=callback.data)
    await callback.message.edit_text(
        "<b>–®–∞–≥ 3. –í–µ—á–µ—Ä.</b>\n\n"
        "–ù–∞–≥—É–ª—è–ª–∏—Å—å, –ø–æ—Ä–∞ –∏ —Å–µ—Ä—å–µ–∑–Ω–æ –ø–æ–µ—Å—Ç—å:",
        reply_markup=get_final_touch_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(DateConstructorStates.final_touch)
    await callback.answer()

@router.callback_query()
async def process_final_touch(callback: CallbackQuery, state: FSMContext):
    logger.info(f"Received callback data: {callback.data}")
    if callback.data.startswith("final_"):
        await state.update_data(final_touch=callback.data)
        await callback.message.edit_text(
            "<b>–®–∞–≥ 4. –í—ã–±–æ—Ä –¥–∞—Ç—ã.</b>\n\n"
            "üìÖ –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
            reply_markup=get_date_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(DateConstructorStates.date)
    elif callback.data == "custom_final":
        await callback.message.edit_text(
            "–ù–∞–ø–∏—à–∏, –∫—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –ø–æ–π—Ç–∏ –≤–µ—á–µ—Ä–æ–º:"
        )
        await state.set_state(DateConstructorStates.custom_final_touch)
    await callback.answer()

@router.callback_query(DateConstructorStates.date)
async def process_date(callback: CallbackQuery, state: FSMContext):
    if not callback.data.startswith("date_"):
        return
    
    date = callback.data[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "date_"
    await state.update_data(date=date)
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±–æ—Ä–∞
    atmo_text = ATMOSPHERE_TEXTS.get(data.get("atmosphere", ""), data.get("atmosphere"))
    activity_text = ACTIVITY_TEXTS.get(data.get("activity", ""), data.get("activity"))
    final_touch_text = FINAL_TOUCH_TEXTS.get(data.get("final_touch", ""), data.get("final_touch"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    final_text = (
        f"–ú—ã –ø—Ä–æ—Å—ã–ø–∞–µ–º—Å—è <b>{date}</b> –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è <b>{atmo_text}</b>.\n"
        f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏–¥–µ–º <b>{activity_text}</b>.\n"
        f"–ê –≤–µ—á–µ—Ä–æ–º –Ω–∞—Å –∂–¥–µ—Ç <b>{final_touch_text}</b>."
    )
    
    await callback.message.edit_text(
        final_text,
        parse_mode="HTML"
    )
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "custom_atmo")
async def process_custom_atmosphere(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ù–∞–ø–∏—à–∏, –∫—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –ø–æ–π—Ç–∏ —É—Ç—Ä–æ–º:"
    )
    await state.set_state(DateConstructorStates.custom_atmosphere)
    await callback.answer()

@router.message(DateConstructorStates.custom_atmosphere)
async def process_custom_atmosphere_text(message: Message, state: FSMContext):
    await state.update_data(atmosphere=message.text)
    await message.answer(
        "<b>–®–∞–≥ 2. –î–µ–Ω—å.</b>\n\n"
        "–ù—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Ç–∞—Ç—å—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞–ª—ã –Ω–∞ –±–æ–∫–∞–ª—å—á–∏–∫:",
        reply_markup=get_activity_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(DateConstructorStates.activity)

@router.callback_query(F.data == "custom_act")
async def process_custom_activity(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ù–∞–ø–∏—à–∏, –∫—É–¥–∞ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –ø–æ–π—Ç–∏ –¥–Ω–µ–º:"
    )
    await state.set_state(DateConstructorStates.custom_activity)
    await callback.answer()

@router.message(DateConstructorStates.custom_activity)
async def process_custom_activity_text(message: Message, state: FSMContext):
    await state.update_data(activity=message.text)
    await message.answer(
        "<b>–®–∞–≥ 3. –í–µ—á–µ—Ä.</b>\n\n"
        "–ù–∞–≥—É–ª—è–ª–∏—Å—å, –ø–æ—Ä–∞ –∏ —Å–µ—Ä—å–µ–∑–Ω–æ –ø–æ–µ—Å—Ç—å:",
        reply_markup=get_final_touch_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(DateConstructorStates.final_touch)

@router.message(DateConstructorStates.custom_final_touch)
async def process_custom_final_touch_text(message: Message, state: FSMContext):
    await state.update_data(final_touch=message.text)
    await message.answer(
        "<b>–®–∞–≥ 4. –í—ã–±–æ—Ä –¥–∞—Ç—ã.</b>\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=get_date_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(DateConstructorStates.date)
